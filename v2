Skip to content
Commands
Search
Packager files
Recent
Cloud Services
Workspace Features
Collaboration
Other
Workspace Extensions
None installed.
Selection deleted
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]):  # Check row
            return True
        if all([board[j][i] == player for j in range(3)]):  # Check column
            return True
    if all([board[i][i] == player for i in range(3)]):  # Check diagonal
        return True
    if all([board[i][2 - i] == player for i in range(3)]):  # Check anti-diagonal
        return True
    return False

def is_board_full(board):
    return all([cell != ' ' for row in board for cell in row])

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)
        print(f"Player {current_player}'s turn.")

        # Get user input
        row = int(input("Enter row (1, 2, 3): ")) - 1
        col = int(input("Enter column (1, 2, 3): ")) - 1

        if board[row][col] != ' ':
            print("Cell is already taken, choose another one.")
            continue

        board[row][col] = current_player

        # Check if the current player wins
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break

        # Check if the board is full (i.e., a tie)
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        # Switch players
        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    tic_tac_toe()


2s
 on 08:15:24, 08/11
- Replit
